@page "/customerlist"
@using TrashService.Services
@inject AppDbContext DbContext
@inject CustomerBalanceService BalanceService

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="mb-0">Customer List</h3>
        <div>
            <a href="addcustomer" class="btn btn-primary me-2">
                <i class="oi oi-plus me-1"></i> Add New Customer
            </a>
            <button class="btn btn-success" @onclick="OpenDatePickerForSelected">
                <i class="oi oi-calendar me-1"></i> Add Service to Selected
            </button>
        </div>
    </div>

    @if (customers.Count == 0)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th width="40">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" 
                                       @onchange="@(e => SelectAllCustomers(e.Value is bool b && b))"/>
                            </div>
                        </th>
                        <th>Name</th>
                        <th>Address</th>
                        <th>Payment Type</th>
                        <th>Balance</th>
                        <th>Last Service</th>
                        <th width="200">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in customers)
                    {
                        <tr>
                            <td>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="selectedCustomerIds[customer.Id]"/>
                                </div>
                            </td>
                            <td><strong>@customer.Name</strong></td>
                            <td>@customer.Address</td>
                            <td><span class="badge bg-secondary">@customer.PaymentType</span></td>
                            <td>
                                <span class="@(customer.Balance >= 0 ? "text-success" : "text-danger") fw-bold">
                                    $@customer.Balance.ToString("F2")
                                </span>
                            </td>
                            <td>
                                @if (customer.Services.Any())
                                {
                                    var lastService = customer.Services.MaxBy(s => s.Date);
                                    <div>@lastService?.Date.ToShortDateString()</div>
                                    <span class="status-indicator @(lastService?.IsPaid == true ? "status-paid" : "status-pending")">
                                        @(lastService?.IsPaid == true ? "Paid" : "Pending")
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">No services</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group">
                                    <a href="@($"customer/balance/{customer.Id}")" class="btn btn-primary btn-sm">
                                        <i class="oi oi-dollar"></i>
                                    </a>
                                    <button class="btn btn-info btn-sm text-white" @onclick="() => ShowTransactions(customer.Id)">
                                        <i class="oi oi-list"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        @if (selectedCustomerId == customer.Id)
                        {
                            <tr>
                                <td colspan="7">
                                    <div class="card">
                                        <div class="card-body">
                                            <h5 class="card-title mb-4">Transaction History</h5>
                                            @if (transactions.Any())
                                            {
                                                <div class="table-responsive">
                                                    <table class="table table-sm mb-0">
                                                        <thead>
                                                            <tr>
                                                                <th>Date</th>
                                                                <th>Type</th>
                                                                <th>Amount</th>
                                                                <th>Description</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var transaction in transactions)
                                                            {
                                                                <tr class="@(transaction.Id == 0 ? "table-warning" : "")">
                                                                    <td>@transaction.TransactionDate.ToLocalTime().ToString("g")</td>
                                                                    <td>
                                                                        @if (transaction.Id == 0)
                                                                        {
                                                                            <span class="badge bg-warning">Pending</span>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span class="badge bg-secondary">@transaction.Type</span>
                                                                        }
                                                                    </td>
                                                                    <td class="@(transaction.Amount >= 0 ? "text-success" : "text-danger") fw-bold">
                                                                        $@transaction.Amount.ToString("F2")
                                                                    </td>
                                                                    <td>@transaction.Description</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            }
                                            else
                                            {
                                                <p class="text-muted mb-0">No transactions found.</p>
                                            }
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<div class="modal @(isDatePickerModalOpen ? "show d-block" : "d-none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Select Service Date</h5>
                <button type="button" class="btn-close" @onclick="CloseDatePicker"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="serviceDate" class="form-label">Service Date</label>
                    <input type="date" 
                           id="serviceDate"
                           class="form-control" 
                           @bind="selectedServiceDate" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDatePicker">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SaveServiceDate">
                    <i class="oi oi-check me-1"></i> Save
                </button>
            </div>
        </div>
    </div>
</div>

@if (isDatePickerModalOpen)
{
    <div class="modal-backdrop show"></div>
}

@code {
    private List<Customer> customers = [];
    private List<PaymentTransaction> transactions = new();
    private int? selectedCustomerId = null;
    private Dictionary<int, bool> selectedCustomerIds = new();
    private bool isDatePickerModalOpen;
    private DateTime selectedServiceDate = DateTime.Today.AddDays(7);
    private List<int> customersForService = new();

    private void SelectAllCustomers(bool selected)
    {
        if (customers != null)
        {
            foreach (var customer in customers)
            {
                selectedCustomerIds[customer.Id] = selected;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        customers = await DbContext.Customers
            .Include(c => c.Services)
            .ToListAsync();
           
        // Initialize dictionary for all customers
        selectedCustomerIds = customers.ToDictionary(c => c.Id, _ => false);

    }

    private async Task ShowTransactions(int customerId)
    {
        if (selectedCustomerId == customerId)
        {
            selectedCustomerId = null; // Collapse if already open
            transactions.Clear();
        }
        else
        {
            selectedCustomerId = customerId;
            var customer = await DbContext.Customers.FirstOrDefaultAsync(c => c.Id == customerId);
            if (customer != null)
            {
                transactions = await BalanceService.GetTransactionsForCustomer(customer);
            }
        }
    }
    private static DateTime GetNextWednesday()
    {
        var today = DateTime.Today;
        int daysUntilWednesday = ((int)DayOfWeek.Wednesday - (int)today.DayOfWeek + 7) % 7;
        if (daysUntilWednesday == 0) // If today is Wednesday, go to next week
            daysUntilWednesday = 7;
        return today.AddDays(daysUntilWednesday);
    }

    private void OpenDatePickerForSelected()
    {
        customersForService = selectedCustomerIds
            .Where(x => x.Value)
            .Select(x => x.Key)
            .ToList();

        if (!customersForService.Any()) return;
        selectedServiceDate = GetNextWednesday();

        isDatePickerModalOpen = true;
    }

    private void CloseDatePicker()
    {
        isDatePickerModalOpen = false;
        customersForService.Clear();
    }

    private async Task SaveServiceDate()
    {
        await BalanceService.CreateServicesAndUpdateBalances(customersForService, selectedServiceDate);
        await LoadCustomers();
        CloseDatePicker();
    }

}