@page "/invoice/{CustomerId:int}"
@inject AppDbContext db

<h3>Invoice</h3>

@if (customer != null)
{
    <div class="invoice-container">
        <h4>Invoice for @customer.Name</h4>
        <p>Address: @customer.Address</p>
        <p>Payment Type: @customer.PaymentType</p>

        <table class="invoice-table">
            <thead>
                <tr>
                    <th>Date of Service</th>
                    <th>Charge</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var service in services)
                {
                    <tr>
                        <td>@service.Date.ToShortDateString()</td>
                        <td>$@price.ToString("F2")</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <th>Total</th>
                    <th>$@total.ToString("F2")</th>
                </tr>
            </tfoot>
        </table>

        <button @onclick="PrintInvoice">Print</button>
    </div>
}
else
{
    <p>Customer not found.</p>
}

<style>
    .invoice-container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ccc;
    }
    .invoice-table {
        width: 100%;
        border-collapse: collapse;
    }
    .invoice-table th, .invoice-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    .invoice-table tfoot th {
        text-align: right;
    }
    @@media print {
        body * {
            visibility: hidden;
        }
        .invoice-container, .invoice-container * {
            visibility: visible;
        }
        .invoice-container {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
        }
        button {
            display: none; /* Hide the print button when printing */
        }
    }
</style>

@code {
    [Parameter]
    public int CustomerId { get; set; }

    private Customer customer;
    private List<Service> services;
    private decimal price = 2m; // Price per service
    private decimal total;

    protected override async Task OnInitializedAsync()
    {
        customer = await db.Customers.FindAsync(CustomerId);
        if (customer != null)
        {
            services = await db.Services
                .Where(s => s.CustomerId == CustomerId)
                .OrderBy(s => s.Date)
                .ToListAsync();
            total = services.Count * price;
        }
    }

    private void PrintInvoice()
    {
        // Trigger the browser's print dialog
        JSRuntime.InvokeVoidAsync("window.print");
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}